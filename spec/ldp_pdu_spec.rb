require 'spec_helper'
require 'ldp_pdu'
require 'stringio'
require 'string_slicer'
require 'json'

RSpec.describe LDPPDUPacked do
  # taken from https://www.cloudshark.org/captures/5250c19ac6f2
  let(:pdu1) { "\x00\x01\x00\x0e\x0a\x00\x01\x01\x00\x00\x02\x01\x00\x04\x00\x00\x00\x03".force_encoding('ASCII-8BIT')}
  let(:pdu2) { "\x00\x01\x00\xc8\x0a\x00\x01\x01\x00\x00\x03\x00\x00\x16\x00\x00\x00\x04\x01\x01\x00\x0e\x00\x01\x0a\x00\x00\x01\x0a\x00\x00\x09\x0a\x00\x01\x01\x04\x00\x00\x18\x00\x00\x00\x05\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x00\x08\x02\x00\x00\x04\x00\x00\x00\x03\x04\x00\x00\x18\x00\x00\x00\x06\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x00\x0c\x02\x00\x00\x04\x00\x00\x00\x10\x04\x00\x00\x18\x00\x00\x00\x07\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x02\x00\x02\x00\x00\x04\x00\x00\x00\x11\x04\x00\x00\x18\x00\x00\x00\x08\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x00\x00\x02\x00\x00\x04\x00\x00\x00\x03\x04\x00\x00\x18\x00\x00\x00\x09\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x01\x00\x02\x00\x00\x04\x00\x00\x00\x03\x04\x00\x00\x18\x00\x00\x00\x0a\x01\x00\x00\x08\x02\x00\x01\x1e\x0a\x00\x00\x04\x02\x00\x00\x04\x00\x00\x00\x12".force_encoding('ASCII-8BIT') }
  let(:bytes) { pdu1 + pdu2 }
  let(:serialised_pdu_stream) { StringIO.new(bytes)}

  # TODO these packed classes are getting repetitive, find a better pattern

  it 'breaks up real PDUs' do
    expect(LDPPDUPacked.new(serialised_pdu_stream).call).to eq(pdu1)
    expect(LDPPDUPacked.new(serialised_pdu_stream).call).to eq(pdu2)
  end
end

RSpec.describe LDPPDU do
  describe '.build_from_packet' do
    let(:pdu_version) { "\x00\x01".force_encoding('ASCII-8BIT') }
    let(:message1) { "\x01\x00\x00\x02\xab\xcd".force_encoding('ASCII-8BIT') }
    let(:message2) { "\x01\x00\x00\x02\xab\xcd".force_encoding('ASCII-8BIT') }
    let(:message3) { "\x01\x00\x00\x02\xab\xcd".force_encoding('ASCII-8BIT') }
    let(:pdu_body) { message1 + message2 + message3 }
    let(:pdu_length) { [pdu_body.length].pack('>S') }
    let(:packed_pdu) { pdu_version + pdu_length + pdu_body }
    subject(:pdu) { LDPPDU.build_from_packet(packed_pdu) }

    it 'unpacks the PDU and its contents' do
      expect(pdu.messages.size).to eq(3)
    end
  end
end
